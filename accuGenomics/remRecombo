#!/bin/bash -e

##usage: remRecombo <lookupTable> <bam> <splitSeq>
## For SNAQ analysis requiring reads containing both control and native sequences.
## Create bad and good read file place-holders with bam header,
## awk Import NT IS lookup table, create recombinant hash table RefName : POS : base, where base is switched between IS and NT
##    Use cigar for each read and look at each position to see if found in hash (if yes, it's a recombinate or unfortunate NGS error/mutant,
##    add QName to badQname table and read added to bad.sam; else read added to tempFile
##    After samtools view input done, test each queryName in tempFile exists in badQname table, if yes move read to bad.sam; else add to good.sam
##Complexity Control extraction.  If RefName contains CC, hard coded position extracted into a file: SampleID matchQuality/PoolID Sequence.
##		a or b indicates bad CC from pool1 or pool2, other wise 1 or 2 indicates CC sequence passed QC and indicates it source.
##	CC QC uses the bases flanking the Ns to ensure alignment was correct.
##	NT and IS CC-regions counted to allow for future relative yield calculations.
##splitSeq boolean indicates if the NT and IS should be split to create separated FASTQ
##Clean up: covert sam to bam, index, create fastq, tabulate CC results
## Version:
##	0.1 First release, uses concatenated IS
##	0.2 Add removal of pairs, instead of either R1 or R2
##	0.3 Add single read support, count CC region in NT, IS, and CC, for
##		reads indicate if bad match to pool 1 =a and pool 2 =b, move CC to their own bam
## For Support: tmorrison@accuGenomics.com

pi=$(dirname "${2}")
fp=$(basename "$2")
fe=${fp##*.}
fn=${fp%.*}
if [[ $fe -ne "bam" ]];then
	echo "Input file not bam"
	exit 1
fi
complexityFile="${pi}/${fn}-CC.txt"
goodFile="${pi}/${fn}-good.sam"
isFile="${pi}/${fn}-IS.sam"
badFile="${pi}/${fn}-bad.sam"
ccFile="${pi}/${fn}-cc.sam"
hashTallies="${pi}/${fn}-tallies.txt"
tempFile="${pi}/tempFile.sam"

echo "Preparing ${pi}/${fn}.${fe}..."
samtools view -H "${pi}/${fn}.${fe}" > $goodFile
cp $goodFile $badFile
cp $goodFile $ccFile
cp $goodFile $isFile

echo "Removing recombinants & calculating CC..."
samtools view "${pi}/${fn}.${fe}" | awk -v badFile="$badFile" -v ccFile="$ccFile" -v tempFile="$tempFile" -v goodFile="$goodFile" -v hashTallies="$hashTallies" -v complexityFile="$complexityFile" -v sampleName="$fn" -v splitSeq="$3" -v isFile="$isFile" ' 
BEGIN {
	xs="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
}
NR==FNR{
	if(NR==1 && ($1 != "NT_CHROM" || $2 != "NT_POS" || $3 != "NT_REF" || $4 != "IS_CHROM" || $5 != "IS_POS" || $6 != "IS_REF" )) {
		print "ERROR: NT-IS lookup file header incorrect" > "/dev/stderr"
		print $1 "\t" $2 "\t" $3 "\t" $4 "\t" $5 "\t" $6 > "/dev/stderr"
		exit 1
	}
	if($6 ~/[gatc]/) {
		NTs[$1 ":" $2 toupper($6)]=0
		NTs[$4 ":" $5 toupper($3)]=0
	}
	next
}
FILENAME==tempFile{
	if (FNR==1) fflush(tempFile) #hack to force final file write. 
	##code reads through tempFile.sam file and strips out read if in ccQname or badQname hash
	if($1 in ccQname){
		print $0 >> ccFile #this will ensure no CC chimeras end up in good bam
	} else if($1 in badQname){
		print $0 >> badFile #this will ensure R2, which could be recombo, does not end up in good bam
	} else if (splitSeq) {
		if ($3 ~ /-SNAQ$/) {
			print $0 >> isFile

		} else {
			print $0 >> goodFile
		}	
	} else {
		print $0 >> goodFile
	}
	next
}
!/^@/ {
	tmp=$10
	cmp=$6
	n=patsplit(cmp,a,/[0-9]*[MSID]/) 
	pnt=0
	for(i=1;i<=n;i++){
		cd=substr(a[i],length(a[i]),1) 
		nm=substr(a[i],1,length(a[i])-1) 
		if(cd=="M"){
			pnt=pnt+nm
		}
		else if (cd=="D"){
			tmp=substr(tmp,1,pnt) substr(xs,1,nm) substr(tmp,pnt+1,length(tmp)) 
			pnt=pnt+nm 
		}
		else if (cd=="I"){
	                tmp=substr(tmp,1,pnt) substr(tmp,pnt+nm+1,length(tmp)-nm-pnt )
		}	
       	        else if (cd=="S"){
	                tmp=substr(tmp,1,pnt) substr(tmp,pnt+nm+1,length(tmp)-nm-pnt ) 
       	        }
		else{
			print $1 " cigar Term " cd " not recognized" > "/dev/stderr"
		}
	}
	if ($3 ~ /-CC$/ || $3 ~ /-CC.[0-9]*$/ ) { #put && ! ntf if eliminating recombinant CC
		print $0 >> ccFile
		if(!($1 in ccQname)) {
			t2 = 655 - $4 + 1
			if (t2 >0 && t2 + 9 < length(tmp) && !($1 in CCc2)) { #ensures no double counting
				CCc2[$1]=0
				ccQname[$1]=0
				t1=substr(tmp,t2,10)
				if(t1 ~/^T[AGTC]{8}G/) {
					printf("%s\t%s\t%s\n", sampleName, "2", t1) > complexityFile
				} else {
					printf("%s\t%s\t%s\n", sampleName, "b", t1) > complexityFile
				}
			} else {
				t2=433 - $4 +1 
				if (t2 >0 && t2 + 9 < length(tmp) && !($1 in CCc1)) {
					CCc1[$1]=0
					ccQname[$1]=0
					t1=substr(tmp,t2,10)
					if (t1 ~/G[AGTC]{8}T/) {
						printf("%s\t%s\t%s\n", sampleName, "1", t1) > complexityFile 
                        		} else {
						printf("%s\t%s\t%s\n", sampleName, "a", t1) > complexityFile
					}
				}
			}
		}
	} else {
		ntf=0
		n=split(tmp,a,"")
        	for (i=1;i<=n;i++){
        	        b=$3 ":" $4+i-1 a[i]
        	        if (b in NTs){
        	                NTs[b]++
        	                ntf++
        	        }
        	}
        	if (ntf){
        	        print $0 >> badFile
        	        badQname[$1]=0
        	}
        	else {
        	        print $0 > tempFile #create this file to hold good reads, circle back later to remove bad mate pair
        	}
# Count pool1 or pool2 CC regions, must have mapq >4 and not recombinant
        if (!(ntf) && $5 >= 4 && $3 ~ /nCov-19-5110-7127_20ABYFCP.0-SNAQ/ && $4 <= 443 && ($4 + length($10)) >= 452 && !($1 in ISc1)) ISc1[$1]=0   #contains cc domain
        if (!(ntf) && $5 >= 4 && $3=="MN908947.3" && $4 <= 5532 && ($4 + length($10)) >= 5541 && !($1 in NTc1)) NTc1[$1]=0  #contains cc domain
 	if (!(ntf) && $5 >= 4 && $3 ~ /nCov-19-5110-7127_20ABYFCP.0-SNAQ/ && $4 <= 665 && ($4 + length($10)) >= 674 && !($1 in ISc2)) ISc2[$1]=0   #contains cc domain
	if (!(ntf) && $5 >= 4 && $3=="MN908947.3" && $4 <= 5754 && ($4 + length($10)) >= 5763 && !($1 in NTc2)) NTc2[$1]=0  #contains cc domain
	}
}
END {
print length(NTc1) "\t" length(ISc1) "\t" length(CCc1) "\t" length(NTc2) "\t" length(ISc2) "\t" length(CCc2) > complexityFile 
	for (key in NTs){
		print key "\t" NTs[key] > hashTallies 
	}
}' "$1" - "$tempFile"

echo "Creating BAM..."
samtools view -b1h "${pi}/${fn}-good.sam" -o "${pi}/${fn}-good.bam"
samtools index "${pi}/${fn}-good.bam"
if [ -f "${pi}/${fn}-IS.sam" ];then
	samtools view -b1h "${pi}/${fn}-IS.sam" -o "${pi}/${fn}-IS.bam"
	samtools index "${pi}/${fn}-IS.bam"
fi

#because of two pass construction, bad.sam needs to be sorted
samtools sort "${pi}/${fn}-bad.sam" -l 1 -@ 32 -m 1G -o "${pi}/${fn}-bad.bam"
samtools index "${pi}/${fn}-bad.bam"
samtools sort "${pi}/${fn}-cc.sam" -l 1 -@ 32 -m 1G -o "${pi}/${fn}-cc.bam"
samtools index "${pi}/${fn}-cc.bam"

echo "Creating fastq..."
test1=$(samtools view -c -f 1 ${pi}/${fn}-good.sam)
if [[ $test1 -ne 0 ]];then
	if [ -f "${pi}/${fn}-good.sam" ];then	
		samtools sort -n "${pi}/${fn}-good.sam" -o "${pi}/${fn}-rsort.temp" -O bam -@ 32 -m 1G >/dev/null 2>&1
		samtools fastq --verbosity 3 -1 "${pi}/${fn}-NT-R1.fastq.gz" -2 "${pi}/${fn}-NT-R2.fastq.gz" "${pi}/${fn}-rsort.temp" &>/dev/null
	fi
        if [ -f "${pi}/${fn}-IS.sam" ];then
		samtools sort -n "${pi}/${fn}-IS.sam" -o "${pi}/${fn}-rsort.temp" -O bam -@ 32 -m 1G >/dev/null 2>&1
		samtools fastq --verbosity 3 -1 "${pi}/${fn}-IS-R1.fastq.gz" -2 "${pi}/${fn}-IS-R2.fastq.gz" "${pi}/${fn}-rsort.temp" &>/dev/null
	fi
        if [ -f "${pi}/${fn}-bad.sam" ];then
		samtools sort -n "${pi}/${fn}-bad.sam" -o "${pi}/${fn}-rsort.temp" -O bam -@ 32 -m 1G >/dev/null 2>&1
		samtools fastq --verbosity 3 -1 "${pi}/${fn}-bad-R1.fastq.gz" -2 "${pi}/${fn}-bad-R2.fastq.gz" "${pi}/${fn}-rsort.temp" &>/dev/null
	fi
	if [ -f "${pi}/${fn}-CC.sam" ];then
		samtools sort -n "${pi}/${fn}-CC.sam" -o "${pi}/${fn}-rsort.temp" -O bam -@ 32 -m 1G >/dev/null 2>&1
		samtools fastq --verbosity 3 -1 "${pi}/${fn}-CC-R1.fastq.gz" -2 "${pi}/${fn}-CC-R2.fastq.gz" "${pi}/${fn}-rsort.temp" &>/dev/null
	fi
else
        if [ -f "${pi}/${fn}-good.sam" ];then
		samtools fastq -0 "${pi}/${fn}-NT-R1.fastq.gz" "${pi}/${fn}-good.sam"
        fi
        if [ -f "${pi}/${fn}-IS.sam" ];then
		samtools fastq -0 "${pi}/${fn}-IS-R1.fastq.gz" "${pi}/${fn}-IS.sam"
        fi
        if [ -f "${pi}/${fn}-bad.sam" ];then
		samtools fastq -0 "${pi}/${fn}-bad-R1.fastq.gz" "${pi}/${fn}-bad.sam"
	fi
	if [ -f "${pi}/${fn}-CC.sam" ];then
		samtools fastq -0 "${pi}/${fn}-CC-R1.fastq.gz" "${pi}/${fn}-CC.sam"
	fi
fi

echo "Removing scratch files..."
#rm -f "${pi}/${fn}-IS.sam"
#rm -f "${pi}/${fn}-good.sam"
#rm -f "${pi}/${fn}-bad.sam"
#rm -f "${pi}/${fn}-cc.sam"
rm -f "${pi}/tempFile.sam"

echo "Tablulating CC..."
#if [[$(stat -c%s $complexityFile) > 0 ]];then

## Read through <prefix>-CC.txt
##   Create count of each unique <ID><type><seq>
##   Last row of <prefix>-CC.txt has NT1 IS1 NT2 IS2 totCC_reads
awk -v outFile1="${pi}/${fn}-CC-counts.txt" -v outFile2="${2}_CC-read-counts.txt" 'FNR==NR{
	last++;next
}
FNR != last {
	uSEQ[$1 "\t" $2 "\t" $3]++
}
FNR == last {
	coverage=$1 "\t" $2 "\t" $3 "\t" $4 "\t" $5 "\t" $6	
}
END {
	print "SampleID\tTarget\tSequence\tCount\tNT_P1\tIS_P1\tCC_P1\tNT_P2\tIS_P2\tCC_P2" > outFile1
	print "SampleID\tTarget\tUniqueCount\tNT_P1\tIS_P1\tCC_P1\tNT_P2\tIS_P2\tCC_P2" > outFile2
	for (key in uSEQ) {
		print key "\t" uSEQ[key] "\t" coverage > outFile1
		split(key,arr,"\t")
		cUniq[arr[1]"\t"arr[2]]++
	}
	
	for (key in cUniq) {
		print key "\t" cUniq[key] "\t" coverage > outFile2
	}
}' "$complexityFile" "$complexityFile"

#rm -f "$complexityFile"

